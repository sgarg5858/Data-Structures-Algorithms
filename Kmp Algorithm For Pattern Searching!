Question 1:  https://leetcode.com/problems/implement-strstr/description/

Solution:

class Solution {
public:
    int strStr(string text, string pat) {
        int m=text.size(),n=pat.size();
        if(n==0)
            return 0;
        vector<int>lps(n,0);
        int i=1,j=0;
        //starting of construction of longest prefix suffix array
        while(i<n)
        {
            if(pat[i]==pat[j])
            {
                j++;
                lps[i]=j;
                i++;
            }
            else
            {
                if(j!=0)
                {
                    j=lps[j-1];
                }
                else
                {
                    i++;
                }
            }
        }
        i=0,j=0;
        while(i<m)
        {
            if(text[i]==pat[j])
            {
                i++;
                j++;
                if(j==n)
                {
                    return i-j;
                }
            }
            else
            {
                if(j!=0)
                {
                    j=lps[j-1];
                }
                else
                {
                    
                    i++;
                }
            }
        }
        return -1;
    }
};

Question 2: https://leetcode.com/problems/repeated-string-match/description/

Solution:
class Solution {
public:
    int repeatedStringMatch(string a, string pat) {
        int m=a.length(),n=pat.length(),ind=0;
        
       string c=a;
        while(c.length()<pat.length())
        {
            ind++;
            c=c+a;
        }
        ind=ind+2;
        string text="";
        while(ind)
        {
            text=text+a;
            ind--;
        }
        
      
         vector<int>lps(n,0);
        int i=1,j=0;
        //starting of construction of longest prefix suffix array
        while(i<n)
        {
            if(pat[i]==pat[j])
            {
                j++;
                lps[i]=j;
                i++;
            }
            else
            {
                if(j!=0)
                {
                    j=lps[j-1];
                }
                else
                {
                    i++;
                }
            }
        }
       int len=text.length();
        i=0,j=0;
        while(i<len)
        {
            if(text[i]==pat[j])
            {
                j++;
                i++;
                
                if(j==n)
                {
                    int r=i%m;
                    if(r>=1)
                        return i/m+1; 
                    return i/m;
                }
                
            }
            else
            {
                if(j!=0)
                {
                    j=lps[j-1];
                }
                else
                {
                    
                    i++;
                }
            }
        }
        return -1;
    }
};
