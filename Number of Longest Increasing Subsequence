

https://leetcode.com/problems/number-of-longest-increasing-subsequence/description/


class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int n=nums.size(),len=0;
        vector<int>dp(n,1),count(n,1);
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                if(nums[i]>nums[j])
                {
                   if(dp[i]<=dp[j])
                    {
                        dp[i]=max(dp[i],dp[j]+1);
                        count[i]=count[j];
                    }
                    else  if(dp[i]==dp[j]+1)
                    {
                        count[i]=count[i]+count[j];
                    }
                }
            }
            len=max(len,dp[i]);
        }
      int total=0;
        for(int i=0;i<n;i++)
        {
            if(dp[i]==len)
            {
                total+=count[i];
            }
        }
        return total;
    }
};
