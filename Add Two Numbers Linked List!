https://leetcode.com/problems/add-two-numbers/description/

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* a, ListNode* b) {
        ListNode* start=new ListNode(0);
        ListNode* curr=start;
        int sum=0,carry=0;
        while(a||b||carry)
        {
            if(a!=NULL)
            {
                sum+=a->val;
                a=a->next;
            }
            if(b!=NULL)
            {
                sum+=b->val;
                b=b->next;
            }
            sum+=carry;
            carry=sum/10;
            sum=sum%10;
            curr->next=new ListNode(sum);
            curr=curr->next;
            sum=0;
        }
        return start->next;
    }
};

https://leetcode.com/problems/add-two-numbers-ii/description/

Idea is to first Reverse The Strings and then use above idea!

ListNode* reverse(ListNode* head)
{
    if(head==NULL)
        return NULL;
    ListNode* curr=head;
    ListNode* prev=NULL;
    ListNode* nextt;
    while(curr!=NULL)
    {
        nextt=curr->next;
        curr->next=prev;
        prev=curr;
        curr=nextt;
    }
    return prev;
}
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* x, ListNode* y) {
        ListNode* start=new ListNode(0);
        ListNode* curr=start;
        int sum=0,carry=0;
        ListNode* a=reverse(x);
        ListNode* b=reverse(y);
        while(a||b||carry)
        {
            if(a!=NULL)
            {
                sum+=a->val;
                a=a->next;
            }
            if(b!=NULL)
            {
                sum+=b->val;
                b=b->next;
            }
            sum+=carry;
            carry=sum/10;
            sum=sum%10;
            curr->next=new ListNode(sum);
            curr=curr->next;
            sum=0;
        }
        ListNode* res=reverse(start->next);
        return res;
    }
};
Follow up:
We can't reverse Linked List!

```
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* a, ListNode* b) {
        ListNode* curr=NULL;
        ListNode* prev=NULL;
        int sum=0,carry=0;
        stack<int>x,y;
        while(a!=NULL)
        {
            x.push(a->val);
            a=a->next;
        }
        while(b!=NULL)
        {
            y.push(b->val);
                b=b->next;
        }
        while(!x.empty()||!y.empty()||carry)
        {
            if(!x.empty())
            {
                sum+=x.top();
                x.pop();
            }
            if(!y.empty())
            {
                sum+=y.top();
                y.pop();
            }
            sum+=carry;
            carry=sum/10;
            sum=sum%10;
            ListNode* temp=new ListNode(sum);
            temp->next=curr;
            curr=temp;
            sum=0;
            
        }
        return curr;
    }
};
```
